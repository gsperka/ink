$(document).ready(function() {

  var treeID
  var rootJSON = {id:origin, children:[]};
  splitTree(rootJSON);

  function splitTree(rootJSON) {
    for (var i=1; i<treeIDs.length; i++) {
      treeID = treeIDs[i].id.split(',');
      children = rootJSON.children;

      for (var j=0; j<treeID.length; j++) {
        children = addChild(children, treeID[j]);
      }
    }
  }

  function addChild(children, id) {
    for (var i=0; i<children.length; i++) {
      if (children[i].id == id) {
        return children[i].children;
      }
    }
    children.push({'id': id, 'children':[]});
    return children[children.length - 1].children;
  }

  // START OF D3 TREE GENERATION
  // ---------------------------
  // ---------------------------

  var margin = {top: 20, right: 120, bottom: 20, left: 120},
      width = 960 - margin.right - margin.left,
      height = 800 - margin.top - margin.bottom;

  var i = 0,
      duration = 750,
      root;

  var tree = d3.layout.tree()
      .size([height, width]);

  var diagonal = d3.svg.diagonal()
      .projection(function(d) { return [d.y, d.x]; });

  var svg = d3.select("#tree-json").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var sketchTreeData = rootJSON;

        root = sketchTreeData;
        root.x0 = height / 2;
        root.y0 = 0;

        function collapse(d) {
          if (d.children) {
            d._children = d.children;
            d._children.forEach(collapse);
            d.children = null;
          }
        }

        root.children.forEach(collapse);
        update(root);

  // what is this for?
  // d3.select(self.frameElement).style("height", "800px");

  function update(source) {

    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);
    // Normalize for fixed-depth.
    nodes.forEach(function(d) { d.y = d.depth*180; });

    // Update the nodes…
    var node = svg.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
        .on("click", click);

    nodeEnter.append("foreignObject")
      .attr("width", "75")
      .attr("height", "75")
      .append("xhtml:canvas")
      .attr('class', function (d) {
        return 'tree-view-sketches';
      })
      .attr("id", function (d) {
         return "sketch-" + d.id;
         })
      .attr("width", "600")
      .attr("height", "600")
     .style({'border':'1px solid black'});

    nodeEnter.append("circle")
        .attr("r", 1e-6)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeEnter.append("text")
        .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
        .attr("dy", "-.5em")
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .text(function(d) { return d.id; })
        .style("fill-opacity", 1e-6);

    nodeEnter.append("a")
      .attr("xlink:href", function (d) { return '/trees/' + tID + "/sketches/" + d.id; })
      .append("rect")
      .attr("class", "clickable")
      .attr("y", -15)
      .attr("x", function (d) { return d.children || d._children ? -60 : 10; })
      .attr("width", 50) //2*4.5)
      .attr("height", 12)
      .style("fill", "lightsteelblue")
      .style("fill-opacity", .3)        // set to 1e-6 to make transparent
      ;



    // Transition nodes to their new position.
    var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

    nodeUpdate.select("circle")
        .attr("r", 4.5)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeUpdate.select("text")
        .style("fill-opacity", 1);



    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
        .remove();

    nodeExit.select("circle")
        .attr("r", 1e-6);

    nodeExit.select("text")
        .style("fill-opacity", 1e-6);



    // Update the links…
    var link = svg.selectAll("path.link")
        .data(links, function(d) { return d.target.id; });

    // Enter any new links at the parent's previous position.
    link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {x: source.x0, y: source.y0};
          return diagonal({source: o, target: o});
        });

    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {x: source.x, y: source.y};
          return diagonal({source: o, target: o});
        })
        .remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });

    //load canvas
    for(var i=0;i<sketches.length;i++) {
      var jsonString = sketches[i].json_data;
      var sketchId = "sketch-" + sketches[i].id;
      sketchCanvas = new fabric.StaticCanvas(sketchId, {isDrawingMode: false});
      sketchCanvas.loadFromJSON(jsonString, sketchCanvas.renderAll.bind(sketchCanvas));
      $('.tree-view-sketches').css({'height': ' 100px', 'width': '100px', 'border': '1px solid black', 'position':'fixed'})
    }
    
  }

  // Toggle children on click.
  function click(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
    update(d);
  }
})
